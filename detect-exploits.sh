#!/bin/bash

platform="$(uname)"

# Detect whether output is piped or not.
[[ -t 1 ]] && piped=0 || piped=1

# Defaults
force=0
quiet=0
verbose=0
interactive=0
args=()
alerts=0

out() {
  ((quiet)) && return

  local message=$@
  if ((piped)); then
    message=$(echo $message | sed '
      s/\\[0-9]\{3\}\[[0-9]\(;[0-9]\{2\}\)\?m//g;
      s/✖/Error:/g;
      s/✔/Success:/g;
    ')
  fi
  #printf '%b\n' "$message";
  echo -e "$message"
}
die() { out "$@"; exit 1; } >&2
err() { out " \033[1;31m✖\033[0m  $@"; } >&2
success() { out " \033[1;32m✔\033[0m  $@"; }

# Verbose logging
log() { (($verbose)) && out "[debug] $*"; } >&2

# Notify on function success
notify() { [[ $? == 0 ]] && success "$@" || err "$@"; }

# Escape a string
escape() { echo $@ | sed 's/\//\\\//g'; }

report() {
  local output="$(</dev/stdin)"
  local title="$1"
  local logger="${2:-out}"
  local line_count="$(echo -e "$output" | wc -l)"
  [[ -z $output ]] && line_count=0
  if [[ $line_count -gt 0 ]]; then
    $logger "\n\033[1;32m$title\033[0m"
    $logger "\033[1;32m-------------------------------------------------------------\033[0m"
    while read -r line; do
      $logger "$line" | tr -s ' ' | cut -c 1-160
    done <<< "$output"
  fi
  return $line_count
}

# Unless force is used, confirm with user
confirm() {
  (($force)) && return 0;

  read -p "$1 [y/N] " -n 1;
  [[ $REPLY =~ ^[Yy]$ ]];
}

# Script logic ###############################################################

env=
owner=
group=
web_group=
root=
scans=()
exclude_scans=()
uploads_dir=
duplicate_file=

uploads_wordpress="wp-content/{uploads,files_mf,blogs.dir}"
uploads_drupal="sites/*/files"

version="v0.1"

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... DIR
A simple bash script to scan for exploits in WordPress and Drupal.

 Usage:
   $(basename $0) /var/www/drupal
     Run all scans on the drupal directory.

   $(basename $0) --scan-keywords /var/www/drupal
     Run the keywords scan on the drupal directory.

   $(basename $0) --owner=foo --group=bar --web-group=baz /var/www/drupal
     Specify the file ownership fo the permissions scan.

 Options:
  --[no-]scan-keywords    Scan for odd keywords within PHP files.
  --[no-]scan-evals       Scan for evals in PHP files.
  --[no-]scan-whitespaces Scan for large amounts of whitespace possibly hiding code.
  --[no-]scan-longlines   Scan for long lines.
  --[no-]scan-uploads     Scan for odd files in the uploads directory
  --[no-]scan-filenames   Scan for suspicious filenames
  --[no-]scan-duplicates  Scan for duplicate installations
  --[no-]scan-permissions Scan file permissions
  --[no-]scan-upload-permissions  Scan uploaded file permissions
  --owner            The owner of the system files during a file permissions scan.
                     Defaults to user running the script.
  --group            The group of the system files during a file permissions scan
                     Defaults to user running the script.
  --web-group        The web server group for generated files during a file permissions scan
                     Defaults to www-data, apache, or httpd.
  -f, --force        Skip all user interaction
  -q, --quiet        Quiet (no output)
  -v, --verbose      Output more
  -h, --help         Display this help and exit
      --version      Output version information and exit
"
}

# Find and filter helpers ####################################################

find_f() {
  dir=$1; shift
  log "find $dir -regextype posix-egrep "$@" -print0"
  eval find $dir -regextype posix-egrep $@ -print0
}

find_php_files() { find_f "$1" -type f "-regex '.*(php|cgi|inc|module|install|profile)$'"; }
find_exec_files() { find_f "$1" -type f "-regex '.*(php|cgi|inc|module|install|profile|sh|bash|sql)$'"; }

filter_xargs() {
  log "xargs -0 grep --line-number --extended-regexp --ignore-case --color=never $*";
  xargs -0 grep --line-number --extended-regexp --ignore-case --color=never $*;
}
filter_grep() {
  log "grep --line-number --extended-regexp --ignore-case --color=never $*";
  eval grep --line-number --extended-regexp --ignore-case --color=never $*;
}
null_to_nl() { xargs -0 printf '%b\n'; }

# Detection and validation ###################################################

detect_env() {
  if [[ -f $1/wp-config.php ]]; then
    env="wordpress"
    uploads_dir="$uploads_wordpress"
    duplicate_file="wp-config.php"
  elif [[ -f $1/sites/default/settings.php ]]; then
    env="drupal"
    uploads_dir="$uploads_drupal"
    duplicate_file="index.php"
  else
    die "Could not find a valid project root in: $1"
  fi
  log "Detected $env environment in: $1"
}

is_valid_user() {
  local owner=$1
  if [[ -z $owner ]]; then
    err "Owner not set"
    return 1
  elif ! id $owner > /dev/null 2>&1; then
    err "Owner is nog a valid user: $owner"
    return 1
  fi
  return 0
}
is_valid_group() {
  local group=$1
  if [[ -z $group ]]; then
    err "Group is not set"
    return 1
  elif ! grep -q "^${group}:" /etc/group; then
    err "Group does not exist: $group"
    return 1
  fi
  return 0
}

detect_permissions() {
  while ! is_valid_user "$owner"; do
    ((force)) && exit 1
    echo -n "Provide a user: ";
    read owner
  done
  while ! is_valid_group "$group"; do
    ((force)) && exit 1
    echo -n "Provide a group: ";
    read group
  done
  while ! is_valid_group "$web_group"; do
    ((force)) && exit 1
    echo -n "Provide a web server group: ";
    read web_group
  done
}

# Pretty print a run
run() {
  local title=$1
  local title_chars=${#title}
  shift;
  local output="$@"
  debug $title
  if [ ${#output} -gt 0 ]; then
    echo
    echo "$title"
    while ((title_chars--)); do printf '-'; done
    echo
    echo "$output" | sed 's/:/\t/'
  fi
  ((alert++))
}

create_regex_or() {
  local operands=("${@}")
  local old_IFS="$IFS"
  IFS="|"
  pattern="${operands[*]}"
  IFS=$old_IFS
  echo $pattern
}

# Wordlists ##################################################################

FORBIDDEN_WORDS=(
  r0nin m0rtix upl0ad r57shell c99shell shellbot phpshell void\.ru
  phpremoteview directmail bash_history \.ru/ [^+]multiviews cwings vandal viagra
  casino cialis poker bitchx eggdrop guardservices psybnc dalnet undernet
  vulnscan spymeta raslan58 Webshell \\\$GLOBALS\\\[\\\$GLOBALS
)

FORBIDDEN_FILENAMES=(
  wp-info.txt _new.php _old.php php.pngg php.jpgg php.giff sql
)

WHITELIST_LONG_WHITESPACE=(
  'plugins\/bbpress\/includes\/admin\/forums\.php:[0-9]*:\s*.<li>'
  'plugins\/bbpress\/includes\/admin\/tools\.php:[0-9]*:\s*.<li>'
  'plugins\/bbpress\/includes\/admin\/settings\.php:[0-9]*:\s*.content'
  'plugins\/bbpress\/includes\/admin\/replies\.php:[0-9]*:\s*.<li>'
  'plugins\/bbpress\/includes\/admin\/topics\.php:[0-9]*:\s*.<li>'
  'plugins\/magic-fields-2\/admin\/mf_post\.php:[0-9]*:\s*.<a class'
)

WHITELIST_LONG_LINE=(
  'data:image\/svg\+xml'
  'cache\/config\/master\.php:1:<\?php exit;\?>'
  'plugins\/wordpress-seo\/admin\/class-admin\.php:[0-9]*:\s*\$stopwords'
  'plugins\/wordpress-popular-posts\/.*admin\.php:[0-9]*:\s*<td>'
  'plugins\/wp-all-import\/helpers\/pmxi_findDuplicates\.php:[0-9]*:\s*\$query'
  'plugins\/dynamic-widgets\/dynwid_admin\.php:[0-9]*:<input type'
  'plugins\/facebook-button-plugin\/facebook-button-plugin\.php:[0-9]*:\s*.af_ZA'
  'plugins\/wp-postratings\/postratings-stats\.php:[0-9]*:\s*\$(most|highest|lowest)'
  'plugins\/ninja-forms\/includes\/activation\.php:[0-9]*:\s*\((NULL|[0-9]*)'
  'plugins\/ninja-forms\/includes\/admin\/upgrades\/upgrade-functions\.php:[0-9]*:\s*\('
  'plugins\/adminer\/inc\/adminer\/.*\.php:[0-9]*:\s*\/\/.*AdminerEdit'
  'w3-total-cache\/inc\/options\/install\.php:[0-9]*:\s*<li>'
  'w3-total-cache\/lib\/SNS\/sdk\.class\.php:[0-9]*:.*\@param string'
  'w3-total-cache\/lib\/W3\/Plugin\/Minify\.php:[0-9]*:.*\(function\(\)\{'
  'plugins\/akismet\/.*\.php:[0-9]*:\.akismet_activate'
  'plugins\/gravityforms\/includes\/fields\/class-gf-field-address\.php:[0-9]*:\s*esc_html__'
  'plugins\/gravityforms\/gravityforms\.php:[0-9]*:\s*\$svg_'
  'plugins\/gravityforms\/form_detail\.php:[0-9]*:\s*__\('
  'plugins\/gravityforms\/forms_model\.php:[0-9]*:\s*\$lead'
  'wp-admin\/includes\/ajax-actions\.php:[0-9]*:\s*\$test_str'
  'wp-includes\/formatting\.php:[0-9]*:\s*\!function'
  'wp-includes\/SimplePie\/Misc\.php:[0-9]*:\s*static\ \$convert_table'
)

WHITELIST_EVAL=(
  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
)

WHITELIST_FORBIDDEN_WORDS=(
  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
)
WHITELIST_UPLOADS=(
  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
)


# Regex ######################################################################

PATTERN_EVAL='((eval.*\((base64_decode|gzinflate|\$_))|[;\s{]eval\(\$|\$[0O]{4,}|FilesMan|JGF1dGhfc|IIIl|die\(PHP_OS|Array\(base64_decode|document\.write\("\\u00|sh(3(ll|11)))'
PATTERN_FORBIDDEN_WORDS=$(create_regex_or "${FORBIDDEN_WORDS[@]}")
PATTERN_LONG_LINE='.{800}'
PATTERN_LONG_WHITESPACE='\s{100}'
PATTERN_FILENAMES=$(create_regex_or "${FORBIDDEN_FILENAMES[@]}")

# Patterns of files to whitelist during keyword scans.
PATTERN_WHITELIST_LONG_LINE=$(create_regex_or "${WHITELIST_LONG_LINE[@]}")
PATTERN_WHITELIST_LONG_WHITESPACE=$(create_regex_or "${WHITELIST_LONG_WHITESPACE[@]}")
PATTERN_WHITELIST_EVAL=$(create_regex_or "${WHITELIST_EVAL[@]}")
PATTERN_WHITELIST_FORBIDDEN_WORDS=$(create_regex_or "${WHITELIST_FORBIDDEN_WORDS[@]}")
PATTERN_WHITELIST_UPLOADS=$(create_regex_or "${WHITELIST_UPLOADS[@]}")

# Scanners ###################################################################

scan_keywords() {
  local root="$1"

  log "running keyword scan on $root"
  find_php_files "$root" \
    | filter_xargs --only-matching "\b($PATTERN_FORBIDDEN_WORDS)\b" \
    | filter_grep -v "'$PATTERN_WHITELIST_FORBIDDEN_WORDS'" \
    | report "Suspicous keywords in $root"
  alerts=$((alerts + $?))
}

scan_evals() {
  local root="$1"

  log "running eval scan on $root"
  find_php_files "$root" \
    | filter_xargs "$PATTERN_EVAL" \
    | filter_grep -v "'$PATTERN_WHITELIST_EVAL'" \
    | report "Suspicious eval statements in $root"
  alerts=$(expr $alerts + $?)
}

scan_longlines() {
  local root="$1"

  log "running long lines scan on $root"
  find_php_files "$root" \
    | filter_xargs "$PATTERN_LONG_LINE" \
    | filter_grep -v "'$PATTERN_WHITELIST_LONG_LINE'" \
    | report "Suspiciously long lines in files"
  alerts=$(expr $alerts + $?)
}

scan_whitespaces() {
  local root="$1"

  log "running long whitespace scan on $root"
  find_php_files "$root" \
    | filter_xargs "$PATTERN_LONG_WHITESPACE" \
    | filter_grep -v "'$PATTERN_WHITELIST_LONG_WHITESPACE'" \
    | report "Suspiciously many whitespaces in files"
  alerts=$(expr $alerts + $?)
}

scan_uploads() {
  local root="$1"
  for dir in $(eval echo "$uploads_dir"); do
    if [[ -d $root/$dir ]]; then
      log "running suspicious files scan in uploads directory $root/$dir"
      find_exec_files "$root/$dir" \
        | null_to_nl \
        | report "Suspicious files found in $dir"
      alerts=$(expr $alerts + $?)
    else
      log "skipping uploads directory: $root/$dir"
    fi
  done
}

scan_filenames() {
  local root="$1"
  log "running filename scan on $root"
  find_f $root "-regex '.*($PATTERN_FILENAMES)'" \
    | report "Suspicious files/dirs found in $root"
  alerts=$(expr $alerts + $?)
}

scan_duplicates() {
  local root="$1"
  log "running duplication scan on $duplicate_file in $root"
  find_f $root -mindepth 2 -name "$duplicate_file" \
    | report "Duplicate file/dir $duplicate_file found in $root"
  alerts=$(expr $alerts + $?)
}

scan_permissions() {
  local root="$1"
  local find_exclude=
  log "running system permissions scan on $duplicate_file in $root"

  for dir in $(eval echo "$uploads_dir"); do
    if [[ -d $root/$dir ]]; then
      find_exclude="${find_exclude} -path '$root/$dir' -prune -o"
    else
      log "skipping uploads directory: $root/$dir"
    fi
  done

  find_f "$root" $find_exclude \
    "\(" \
      "\( -not -user $owner -o -not -group $group \)" \
      -o "\( -type f -not -perm 0644 \)" \
      -o "\( -type d -not -perm 0755 \)" \
    "\)" \
    | null_to_nl \
    | report "System file/directory permissions too loose"
  alerts=$(expr $alerts + $?)
}

scan_upload_permissions() {
  local root="$1"
  local find_exclude=
  local permissive_dirs=
  log "running uploads permissions scan on $duplicate_file in $root"

  # Check if web group is also a user, if it is it's also permitted.
  if id -u "$web_group" > /dev/null 2>&1; then
    local permissive_user_condition="\( -not -user $owner -o -not -user $web_group \)"
  else
    local permissive_user_condition="\( -not -user $owner \)"
  fi

  for dir in $(eval echo "$uploads_dir"); do
    if [[ -d $root/$dir ]]; then
      [[ ! -z "$permissive_dirs" ]] && permissive_dirs="${permissive_dirs} -o"
      permissive_dirs="${permissive_dirs} -path '$root/$dir*'"
    else
      log "skipping uploads directory: $root/$dir"
    fi
  done

  if [[ ! -z "$permissive_dirs" ]]; then
    find_f "$root" \
      "\( $permissive_dirs \)" \
      "\(" \
        $permissive_user_condition \
        "-o -not -group $web_group" \
        "-o \( -type f -not -name '.htaccess' -perm /113 \)" \
        "-o \( -type d -not -name '.htaccess' -perm /002 \)" \
        "-o \( -name '.htaccess'  -perm /333 \)" \
      "\)" \
      | null_to_nl \
      | report "Uploads file/directory permissions too loose"
    alerts=$(expr $alerts + $?)
  fi
}

### Environments



# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i=1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

### Main Loop ################################################################

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; exit ;;
    --version) out "$(basename $0) $version"; exit ;;
    --scan-keywords) scans+=(keywords) ;;
    --scan-evals) scans+=(evals) ;;
    --scan-whitespaces) scans+=(whitespaces) ;;
    --scan-longlines) scans+=(longlines) ;;
    --scan-uploads) scans+=(uploads) ;;
    --scan-filenames) scans+=(filenames);;
    --scan-duplicates) scans+=(duplicates);;
    --scan-permissions) scans+=(permissions);;
    --scan-upload-permissions) scans+=(upload_permissions);;
    --no-scan-keywords) exclude_scans+=(keywords) ;;
    --no-scan-evals) exclude_scans+=(evals) ;;
    --no-scan-whitespaces) exclude_scans+=(whitespaces) ;;
    --no-scan-longlines) exclude_scans+=(longlines) ;;
    --no-scan-uploads) exclude_scans+=(uploads) ;;
    --no-scan-filenames) exclude_scans+=(filenames);;
    --no-scan-duplicates) exclude_scans+=(duplicates);;
    --no-scan-permissions) exclude_scans+=(permissions);;
    --no-scan-upload-permissions) exclude_scans+=(upload_permissions);;
    --scan-all) scans+=(keywords evals whitespaces longlines uploads filenames duplicates permissions upload_permissions) ;;
    --owner) shift; owner="$1" ;;
    --group) shift; group="$1" ;;
    --web-group) shift; web_group="$1" ;;
    -v|--verbose) verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

root="$1"; shift
[[ -z "$root" ]] && root="."

# Store the remaining part as arguments.
args+=("$@")

# Set defaults
owner="${owner:-$USER}"
group="${group:-$(id -g -n $USER)}"
if [[ -z $web_group ]]; then
  if is_valid_group "www-data" >/dev/null 2>&1; then web_group="www-data"
  elif is_valid_group "apache" >/dev/null 2>&1; then web_group="apache"
  elif is_valid_group "httpd" >/dev/null 2>&1; then web_group="httpd"
  fi
fi

if [[ ${#scans[@]} -eq 0 ]]; then
  scans+=(keywords evals whitespaces longlines uploads filenames duplicates permissions upload_permissions)
fi

run_scans=()
for scan in "${scans[@]}"; do
  if [[ ! " ${exclude_scans[@]} " =~ " $scan " ]]; then
    run_scans+=($scan)
    exclude_scans+=($scan)
  fi
done

# Detect the environment
detect_env "$root"
if [[ " ${run_scans[@]} " =~ "permissions " ]]; then
  detect_permissions "$owner" "$group" "$web_group"
fi

# Run script #################################################################

for scan in "${run_scans[@]}"; do
  scan_$scan "$root"
done

if [ $alerts -gt 0 ]; then
  die "$alerts alerts found."
fi
